scale_y_log10() +
facet_wrap(~ quality.factor)
summary(wines$density)
## How the "pH" attribute is distributed?
ggplot(aes(x=density), data = wines) +
geom_histogram()
aggregate(wines['density'], wines['quality'], mean)
## How the "denstiy" attribute is distributed by quality?
## The following references have helped me to build the graph I was looking for:
## https://stackoverflow.com/questions/29957669/different-colour-palettes-for-two-different-colour-aesthetic-mappings-in-ggplot2
## https://stackoverflow.com/questions/1644661/add-a-vertical-line-with-different-intercept-for-each-panel-in-ggplot2
## https://stackoverflow.com/questions/6557977/how-do-i-add-the-mean-value-to-a-histogram-in-r
## http://www.sthda.com/english/wiki/colors-in-r
library("RColorBrewer")
ggplot(wines) +
geom_histogram(aes(x=density)) +
geom_vline(data = aggregate(wines['density'], wines['quality'], mean),
mapping = aes(xintercept=density, color=as.factor(quality))) +
scale_color_manual(values = brewer.pal(n=8, name="Set1"))
summary(wines[c(7,8)])
## Since I want to see in an unique plot both 'free' and 'total' sulfur dioxide,
## I tried first to make use of gridExtra library. However, I wanted to save
## space using a common legend, reason why I switched to "ggpubr" library, as
## suggested in https://stackoverflow.com/questions/13649473/add-a-common-legend-for-combined-ggplots.
#install.packages("ggpubr")
library(ggpubr)
p0 <- ggplot(data = wines) + xlim(0,120) + scale_fill_brewer(type='div')
p1 <- p0 + geom_histogram(aes(x=free.sulfur.dioxide, fill=as.factor(quality)))
p2 <- p0 + geom_histogram(aes(x= total.sulfur.dioxide, fill=as.factor(quality)))
p0log <- ggplot(data = wines) + scale_x_log10() + scale_fill_brewer(type='div')
p3 <- p0log + geom_histogram(aes(x=free.sulfur.dioxide, fill=as.factor(quality)))
p4 <- p0log + geom_histogram(aes(x= total.sulfur.dioxide, fill=as.factor(quality)))
ggarrange(p1,p3,p2,p4,
ncol=2, nrow=2,
common.legend = TRUE, legend = 'bottom')
## Reference for a univariate boxplot using ggplot2:
## https://stackoverflow.com/questions/25049104/why-does-a-boxplot-in-ggplot-requires-axis-x-and-y
ggplot(data = wines, aes(x='total.sulfur.dioxide', y=total.sulfur.dioxide)) +
geom_boxplot()
## How the "chlorides" are present in the wines?
ggplot(data = wines) +
geom_histogram(aes(x=chlorides, fill=as.factor(quality))) +
scale_fill_brewer(type='div') +
scale_y_log10()
## In this plot I tried to check how it stands horizontally
ggplot(data = wines, aes(x='chlorides', y=chlorides)) +
geom_boxplot() + coord_flip()
ggplot(data = wines) +
geom_histogram(aes(x=residual.sugar, fill=as.factor(quality))) +
scale_fill_brewer(type='div') +
scale_y_log10()
## Subseting the data. Instead of using "group_by", I want to summarize all the
## values whose quality is higher than 7 together:
bestAcid <- subset(wines, quality >= 7)
# best <- group_by(subset(wines, quality >= 7), quality)
acidities <- summarise(bestAcid,
fixed_min = min(fixed.acidity),
fixed_mean = mean(fixed.acidity),
fixed_max = max(fixed.acidity),
volat_min = min(volatile.acidity),
volat_mean = mean(volatile.acidity),
volat_max = max(volatile.acidity),
citric_min = min(citric.acid),
citric_mean = mean(citric.acid),
citric_max = max(citric.acid))
## The summarized will be highlighted in the correspondent histogram.
p0 <- ggplot(data = wines) #+ xlim(0,120) + scale_fill_brewer(type='div')
p1 <- p0 + geom_histogram(aes(x=fixed.acidity, fill=as.factor(quality))) +
geom_vline(xintercept=acidities$fixed_min,alpha=0.7,linetype='dotted') +
geom_vline(xintercept=acidities$fixed_mean,alpha=0.8,linetype='dotdash') +
geom_vline(xintercept=acidities$fixed_max,alpha=0.7,linetype='dotted')
p2 <- p0 + geom_histogram(aes(x=volatile.acidity, fill=as.factor(quality))) +
geom_vline(xintercept=acidities$volat_min,alpha=0.7,linetype='dotted') +
geom_vline(xintercept=acidities$volat_mean,alpha=0.8,linetype='dotdash') +
geom_vline(xintercept=acidities$volat_max,alpha=0.7,linetype='dotted')
p3 <- p0 + geom_histogram(aes(x=citric.acid, fill=as.factor(quality))) +
geom_vline(xintercept=acidities$citric_min,alpha=0.7,linetype='dotted') +
geom_vline(xintercept=acidities$citric_mean,alpha=0.8,linetype='dotdash') +
geom_vline(xintercept=acidities$citric_max,alpha=0.7,linetype='dotted')
## Drawing text to explain the min-mean-max lines
## Reference: http://www.sthda.com/english/articles/24-ggpubr-publication-ready-plots/81-ggplot2-easy-way-to-mix-multiple-graphs-on-the-same-page/
text <- paste('The dotted lines to the left and right of each histogram',
'represent the minimum and maximum values, respectively, for the',
'given attribute in all wines whose assigned quality is greater',
'than or equal to 7. The centerlines represent the mean values.',
sep = ' ')
text.p <- ggparagraph(text = text, face = "italic", size = 8, color = "black")
## Arranging the plots on the same page
ggarrange(p1,p2,p3,text.p,
ncol=1, nrow=4,
common.legend = TRUE, legend = 'right')
ggplot(data = wines, aes(x=alcohol, y=quality)) +
geom_point(alpha = 1/5, color='blue') +
#geom_jitter(alpha = 1/5.) +
geom_smooth(method = 'lm', color = 'red')
## First, we need to select the appropriate data:
alcohol_quality <- wines %>%
group_by(quality) %>%
summarise(alcohol_mean = mean(alcohol))
## Since ggplot2 does not contain a ready function for radar chart, I choosed to
## use the radarchart function from "fmsb" package:
#install.packages('fmsb')
library(fmsb)
## In order to apply my data to radarchart, I need to transpose it before:
alcohol_quality <- as.data.frame(t(alcohol_quality))
# The code above set the dataframe name accordingly to the first dataframe row:
names(alcohol_quality) <- paste('Quality',alcohol_quality[1,], sep = '-')
# We only want the second line, ie, we need to drop the first row:
alcohol_quality <- alcohol_quality[2,]
## Now plotting the radarchart:
radarchart(fuck, axistype=1, calcex = 0.8, vlcex=0.9,
caxislabels = c('9.6%','','11%','','12.4%'),
title="Percentage of alcohol by quality level")
## First, we need to select the appropriate data:
alcohol_quality <- wines %>%
group_by(quality) %>%
summarise(alcohol_mean = mean(alcohol))
## Since ggplot2 does not contain a ready function for radar chart, I choosed to
## use the radarchart function from "fmsb" package:
#install.packages('fmsb')
library(fmsb)
## In order to apply my data to radarchart, I need to transpose it before:
alcohol_quality <- as.data.frame(t(alcohol_quality))
# The code above set the dataframe name accordingly to the first dataframe row:
names(alcohol_quality) <- paste('Quality',alcohol_quality[1,], sep = '-')
# We only want the second line, ie, we need to drop the first row:
alcohol_quality <- alcohol_quality[2,]
## Now plotting the radarchart:
radarchart(alcohol_quality, axistype=1, calcex = 0.8, vlcex=0.9,
caxislabels = c('9.6%','','11%','','12.4%'),
title="Percentage of alcohol by quality level")
## First, we need to select the appropriate data:
alcohol_quality <- wines %>%
group_by(quality) %>%
summarise(alcohol_mean = mean(alcohol))
## Since ggplot2 does not contain a ready function for radar chart, I choosed to
## use the radarchart function from "fmsb" package:
#install.packages('fmsb')
library(fmsb)
## In order to apply my data to radarchart, I need to transpose it before:
alcohol_quality <- as.data.frame(t(alcohol_quality))
# The code above set the dataframe name accordingly to the first dataframe row:
names(alcohol_quality) <- paste('Quality',alcohol_quality[1,], sep = '-')
# We only want the second line, ie, we need to drop the first row:
alcohol_quality <- alcohol_quality[2,]
## Now plotting the radarchart:
radarchart(alcohol_quality, axistype=1, calcex = 0.8, vlcex=0.9,
caxislabels = c('9.6%','','11%','','12.4%'),
title="Percentage of alcohol by quality level")
alcohol_quality
# In order to use the radarchart, we need to add the minmax values as rows:
alcohol_quality=rbind(rep(12.4,6) , rep(9.6,6) , alcohol_quality)
alcohol_quality
## Now plotting the radarchart:
radarchart(alcohol_quality, axistype=1, calcex = 0.8, vlcex=0.9,
caxislabels = c('9.6%','','11%','','12.4%'),
title="Percentage of alcohol by quality level")
## First, we need to select the appropriate data:
alcohol_quality <- wines %>%
group_by(quality) %>%
summarise(alcohol_mean = mean(alcohol))
## Since ggplot2 does not contain a ready function for radar chart, I choosed to
## use the radarchart function from "fmsb" package:
#install.packages('fmsb')
library(fmsb)
## In order to apply my data to radarchart, I need to transpose it before:
alcohol_quality <- as.data.frame(t(alcohol_quality))
# The code above set the dataframe name accordingly to the first dataframe row:
names(alcohol_quality) <- paste('Quality',alcohol_quality[1,], sep = '-')
# We only want the second line, ie, we need to drop the first row:
alcohol_quality <- alcohol_quality[2,]
# In order to use the radarchart, we need to add the minmax values as rows:
alcohol_quality=rbind(rep(12.4,6) , rep(9.6,6) , alcohol_quality)
## Now plotting the radarchart:
radarchart(alcohol_quality, axistype=1, calcex = 0.8, vlcex=0.9,
caxislabels = c('9.6%','','11%','','12.4%'),
title="Percentage of alcohol by quality level")
ggplot(aes(x = pH, y = density), data = wines) +
geom_point(alpha = 0.35, pch = 1) +
geom_smooth(method = loess) +
facet_wrap( ~ quality)
ggplot(aes(x = total.sulfur.dioxide, y = chlorides), data = wines) +
geom_point(alpha = 0.35, pch = 1) +
geom_smooth(method = loess) +
facet_wrap( ~ quality)
ggplot(aes(x = total.sulfur.dioxide, y = chlorides), data = wines) +
geom_point(alpha = 0.35, pch = 1) +
geom_smooth(method = loess) +
scale_x_log10() +
facet_wrap( ~ quality)
ggplot(aes(x = total.sulfur.dioxide, y = chlorides), data = wines) +
geom_point(alpha = 0.35, pch = 1) +
geom_smooth(method = loess) +
#scale_x_log10() +
xlim(0,100) +
facet_wrap( ~ quality)
ggplot(aes(x = total.sulfur.dioxide, y = chlorides), data = wines) +
geom_point(alpha = 0.35, pch = 1) +
geom_smooth(method = loess) +
scale_x_log10() +
#xlim(0,100) +
facet_wrap( ~ quality)
library(GGally)
# Set the seed for reproducible results
ggpairs(wines)
## Defining the variables we will explore:
variables <- c('fixed.acidity','volatile.acidity','quality')
wines[variables]
## Defining the variables we will explore:
variables <- c('alcohol','pH','density','chlorides',
'volatile.acidity','quality')
## Plotting ggpairs for the selected attributed:
ggpairs(wines[variables])
## Plotting ggpairs for the selected attributed:
ggpairs(wines[variables], aes(alpha=0.4))
## Plotting ggpairs for the selected attributed:
ggpairs(wines[variables], aes(alpha=0.3))
## Plotting ggpairs for the selected attributed:
ggpairs(wines[variables], aes(alpha=0.3, position = 'jitter'))
## Plotting ggpairs for the selected attributed:
ggpairs(wines[variables], aes(alpha=0.3,  position = position_jitter(h=0)))
## Plotting ggpairs for the selected attributed:
ggpairs(wines[variables], aes(alpha=0.3,  position_jitter(h=0)))
## Plotting ggpairs for the selected attributed:
ggpairs(wines[variables], aes(alpha=0.3), lower = list(continuous=wrap("points", position="jitter")))
ggpairs(wines[variables], aes(alpha=0.3))
ggpairs(wines[variables], aes(alpha=0.3), lower = list(continuous=wrap("points", position="jitter")))
library(GGally)
theme_set(theme_minimal(20))
## Defining the variables we will explore:
variables <- c('alcohol','pH','density','chlorides',
'volatile.acidity','quality')
## Plotting ggpairs for the selected attributed:
ggpairs(wines[variables], aes(alpha=0.3))
## I experimented adding jitter, but the result was not satisfactory:
#ggpairs(wines[variables], aes(alpha=0.3), lower = list(continuous=wrap("points", position="jitter")))
theme_set(theme_minimal())
## Plotting ggpairs for the selected attributed:
ggpairs(wines[variables], aes(alpha=0.3))
ggplot(aes(x=alcohol, y=volatile.acidity), data=wines) +
geom_line(aes(color = quality),
stat='summary',
fun.y = mean) +
geom_line(stat ='summary', fun.y = mean, linetype = 2)
ggplot(aes(y=alcohol, x=volatile.acidity), data=wines) +
geom_line(aes(color = quality),
stat='summary',
fun.y = mean) +
geom_line(stat ='summary', fun.y = mean, linetype = 2)
x
ggplot(aes(x=alcohol, y=volatile.acidity), data=wines) +
geom_line(aes(color = quality),
stat='summary',
fun.y = mean)
ggplot(data=wines,
aes(x=alcohol, y=volatile.acidity, colour=quality)) +
geom_line()
ggplot(data=wines,
aes(x=round(alcohol/5)*5, y=volatile.acidity, colour=quality)) +
geom_line()
ggplot(data=wines,
aes(x=round(alcohol/5)*5, y=round(volatile.acidity/5)*5, colour=quality)) +
geom_line()
ggplot(data=wines,
aes(x=round((alcohol/5)*5), y=round(volatile.acidity/5)*5, colour=quality)) +
geom_line()
ggplot(data=wines,
aes(x=round((alcohol/5)*5), y=round((volatile.acidity/5)*5), colour=quality)) +
geom_line()
ggplot(data=wines,
aes(x=alcohol, y=volatile.acidity, colour=quality)) +
geom_line()
ggplot(aes(x= alcohol, y = volatile.acidity), data = wines) +
#coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha=1/50,
position = position_jitter(h=0),
color = 'orange')
ggplot(aes(x= alcohol, y = volatile.acidity), data = wines) +
#coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha=1/50,
position = position_jitter(h=0),
color = 'orange')
ggplot(aes(x= alcohol, y = volatile.acidity), data = wines) +
#coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha=0.8,
position = position_jitter(h=0),
color = 'orange')
ggplot(aes(x= alcohol, y = volatile.acidity), data = wines) +
#coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha=0.7,
position = position_jitter(h=0),
color = 'orange')
ggplot(aes(x= alcohol, y = volatile.acidity), data = wines) +
#coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha=0.7,
position = position_jitter(h=0),
color = quality)
ggplot(aes(x= alcohol, y = volatile.acidity), data = wines) +
#coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha=0.7,
position = position_jitter(h=0),
)
ggplot(aes(x= alcohol, y = volatile.acidity, color=quality), data = wines) +
#coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha=0.7,
position = position_jitter(h=0)
)
ggplot(aes(x= alcohol, y = volatile.acidity, color=quality), data = wines) +
#coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha=0.7,
position = position_jitter(h=0)
) +
scale_fill_brewer(type='div')
ggplot(aes(x= alcohol, y = volatile.acidity, color=quality), data = wines) +
#coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha=0.7,
position = position_jitter(h=0)
) +
scale_color_brewer(type='div')
ggplot(aes(x= alcohol, y = volatile.acidity, color=quality), data = wines) +
#coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha=0.7,
position = position_jitter(h=0)
) +
scale_color_brewer(palette = 'Set1')
ggplot(aes(x= alcohol, y = volatile.acidity, color=quality), data = wines) +
#coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha=0.7,
position = position_jitter(h=0)
) +
scale_color_manual(values = brewer.pal(n=8, name="Set1"))
ggplot(aes(x= alcohol, y = volatile.acidity, color=quality), data = wines) +
#coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha=0.7,
position = position_jitter(h=0)
)
ggplot(aes(x= alcohol, y = volatile.acidity, color=quality), data = wines) +
#coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha=0.7, position = position_jitter(h=0))
ggplot(aes(x= alcohol, y = volatile.acidity, color=quality), data = wines) +
geom_point(alpha=0.7, position = position_jitter(h=0)) +
geom_line(x/y)
ggplot(aes(x= alcohol, y = volatile.acidity, color=quality), data = wines) +
geom_point(alpha=0.7, position = position_jitter(h=0)) +
geom_line(alcohol/volatile.acidity)
ggplot(aes(x= alcohol, y = volatile.acidity, color=quality), data = wines) +
geom_point(alpha=0.7, position = position_jitter(h=0)) +
scale_color_brewer(palette = 'Set1')
ggplot(aes(x= alcohol, y = volatile.acidity, color=quality), data = wines) +
geom_point(alpha=0.7, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= alcohol, y = volatile.acidity/fixed.acid, color=quality),
alpha=0.7, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= alcohol, y = volatile.acidity/fixed.acidity, color=quality),
alpha=0.7, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= alcohol, y = volatile.acidity, color=quality),
alpha=0.7, position = position_jitter(h=0))
geom_line(aes(x= alcohol, y = volatile.acidity/fixed.acidity)
geom_line(aes(x= alcohol, y = volatile.acidity/fixed.acidity)
ggplot(data = wines) +
geom_point(aes(x= alcohol, y = volatile.acidity, color=quality),
alpha=0.7, position = position_jitter(h=0)) +
geom_line(aes(x= alcohol, y = volatile.acidity/fixed.acidity))
ggplot(data = wines) +
geom_point(aes(x= alcohol, y = volatile.acidity, color=quality),
alpha=0.7, position = position_jitter(h=0)) +
geom_line(aes(x= alcohol, y = (volatile.acidity/fixed.acidity)+1))
ggplot(aes(y = alcohol, x = volatile.acidity, fill = quality),
data = wines) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
ggplot(aes(y = alcohol, x = volatile.acidity, fill = quality),
data = wines) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(10))
ggplot(aes(y = alcohol, x = volatile.acidity, fill = quality),
data = wines) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(1))
ggplot(aes(y = alcohol, x = volatile.acidity, fill = quality),
data = wines) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(1000))
ggplot(aes(y = alcohol, x = volatile.acidity, fill = quality),
data = wines) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(50))
ggplot(aes(x= alcohol, y = volatile.acidity, color=quality), data = wines) +
geom_point(alpha=0.7, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= alcohol, y = volatile.acidity, color=quality),
alpha=0.7, position = position_jitter(h=0))
# Multiple Linear Regression Example
fit <- lm(quality ~ alcohol + volatile.acidity + density, data=wines)
summary(fit) # show results
# Multiple Linear Regression Example
fit <- lm(quality ~ alcohol + volatile.acidity + density, data=wines)
summary(fit) # show results
# Multiple Linear Regression Example
fit <- lm(quality ~ alcohol + volatile.acidity, data=wines)
summary(fit) # show results
plot(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
# compare models
fit1 <- lm(quality ~ alcohol + volatile.acidity, data=wines)
fit2 <- lm(quality ~ alcohol + density, data=wines)
anova(fit1, fit2)
ggplot(data = wines) +
geom_point(aes(x= alcohol, y = volatile.acidity, color=quality),
alpha=0.7, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= alcohol, y = volatile.acidity, color=quality),
alpha=0.4, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= log(alcohol), y = volatile.acidity, color=quality),
alpha=0.4, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= alcohol, y = exp(volatile.acidity), color=quality),
alpha=0.4, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= alcohol, y = volatile.acidity, color=quality),
alpha=0.7, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= alcohol, y = density, color=quality),
alpha=0.7, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= density, y = alcohol, color=quality),
alpha=0.6, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= density, y = pH, color=quality),
alpha=0.6, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= density, y = alcohol, color=quality),
alpha=0.6, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= density, y = pH, color=quality),
alpha=0.6, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= density, y = alcohol, color=quality),
alpha=0.7, position = position_jitter(h=0))
ggplot(data = wines) +
geom_point(aes(x= density, y = pH, color=quality),
alpha=0.7, position = position_jitter(h=0))
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
library(scales)
library(memisc)
## use the I() operator (='as is') which inhibits interpretation/conversion of
## objects. By protecting the expression, ensures it is interpreted in the
## obvious arithmetical way.
m1 <- lm(I(log(alcohol)) ~ I(density), data = wines)
library(scales)
library(memisc)
## use the I() operator (='as is') which inhibits interpretation/conversion of
## objects. By protecting the expression, ensures it is interpreted in the
## obvious arithmetical way.
m1 <- lm(I(quality) ~ I(log(alcohol)), data = wines)
m2 <- update(m1, ~ . + density)   # adding the carat variable to the regression
m3 <- update(m2, ~ . + pH)
m4 <- update(m3, ~ . + volatile.acidity)
mtable(m1, m2, m3, m4)
library(scales)
library(memisc)
## use the I() operator (='as is') which inhibits interpretation/conversion of
## objects. By protecting the expression, ensures it is interpreted in the
## obvious arithmetical way.
m1 <- lm(I(quality) ~ I(alcohol), data = wines)
m2 <- update(m1, ~ . + density)   # adding the carat variable to the regression
m3 <- update(m2, ~ . + pH)
m4 <- update(m3, ~ . + volatile.acidity)
mtable(m1, m2, m3, m4)
summary(m4) # show results
plot(m4)
## Arranging the plots on the same page
ggarrange(p1,p2,p3,text.p,
ncol=1, nrow=4,
common.legend = TRUE, legend = 'right')
ggpairs(wines[variables], aes(alpha=0.3))
## Arranging the plots on the same page
ggarrange(p1,p2,p3,text.p,
ncol=1, nrow=4,
common.legend = TRUE, legend = 'right', title('Teste'))
## Arranging the plots on the same page
ggarrange(p1,p2,p3,text.p,
ncol=1, nrow=4,
common.legend = TRUE, legend = 'right', aes(title = 'Teste'))
annotate_figure(plotOne,
top = text_grob("Wine acidities analysis", face = "bold", size = 14),
fig.lab = "Figure 1", fig.lab.face = "bold")
## Reference on how to add the title:
## http://www.sthda.com/english/rpkgs/ggpubr/reference/annotate_figure.html
## Arranging the plots on the same page
plotOne <- ggarrange(p1,p2,p3,text.p,
ncol=1, nrow=4,
common.legend = TRUE, legend = 'right')
annotate_figure(plotOne,
top = text_grob("Wine acidities analysis", face = "bold", size = 14),
fig.lab = "Figure 1", fig.lab.face = "bold")
plotTwo <- ggpairs(wines[variables], aes(alpha=0.3))
annotate_figure(plotTwo,
top = text_grob("Pair plot of the main attributes", face = "bold", size = 14),
fig.lab = "Figure 2", fig.lab.face = "bold")
ggpairs(wines[variables], aes(alpha=0.3), title= "Pair plot of the main dataset attributes")
ggpairs(wines[variables], aes(alpha=0.3), title= "Pair plot of the main dataset attributes")
ggpairs(wines[variables], aes(alpha=0.3), title= "Pairplots of the main dataset attributes")
ggpairs(wines[variables], aes(alpha=0.3), title= "Pairplot with the main dataset attributes")
radarchart(alcohol_quality, axistype=1, calcex = 0.8, vlcex=0.9,
caxislabels = c('9.6%','','11%','','12.4%'),
title="Percentage of alcohol by quality level")
